# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import filesystem_pb2 as filesystem__pb2


class FileSystemStub(object):
    """The string reversal service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendStringRequest = channel.unary_unary(
                '/filesystem.FileSystem/sendStringRequest',
                request_serializer=filesystem__pb2.StringRequest.SerializeToString,
                response_deserializer=filesystem__pb2.StringReply.FromString,
                )
        self.Access = channel.unary_unary(
                '/filesystem.FileSystem/Access',
                request_serializer=filesystem__pb2.AccessRequest.SerializeToString,
                response_deserializer=filesystem__pb2.AccessReply.FromString,
                )
        self.Mkdir = channel.unary_unary(
                '/filesystem.FileSystem/Mkdir',
                request_serializer=filesystem__pb2.MkdirRequest.SerializeToString,
                response_deserializer=filesystem__pb2.MkdirReply.FromString,
                )
        self.Rmdir = channel.unary_unary(
                '/filesystem.FileSystem/Rmdir',
                request_serializer=filesystem__pb2.RmdirRequest.SerializeToString,
                response_deserializer=filesystem__pb2.RmdirReply.FromString,
                )
        self.Readdir = channel.unary_unary(
                '/filesystem.FileSystem/Readdir',
                request_serializer=filesystem__pb2.ReaddirRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ReaddirReply.FromString,
                )
        self.GetAttr = channel.unary_unary(
                '/filesystem.FileSystem/GetAttr',
                request_serializer=filesystem__pb2.GetAttrRequest.SerializeToString,
                response_deserializer=filesystem__pb2.GetAttrReply.FromString,
                )
        self.Open = channel.unary_unary(
                '/filesystem.FileSystem/Open',
                request_serializer=filesystem__pb2.OpenRequest.SerializeToString,
                response_deserializer=filesystem__pb2.OpenReply.FromString,
                )
        self.Read = channel.unary_unary(
                '/filesystem.FileSystem/Read',
                request_serializer=filesystem__pb2.ReadRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ReadReply.FromString,
                )
        self.Write = channel.unary_unary(
                '/filesystem.FileSystem/Write',
                request_serializer=filesystem__pb2.WriteRequest.SerializeToString,
                response_deserializer=filesystem__pb2.WriteReply.FromString,
                )
        self.Truncate = channel.unary_unary(
                '/filesystem.FileSystem/Truncate',
                request_serializer=filesystem__pb2.TruncateRequest.SerializeToString,
                response_deserializer=filesystem__pb2.TruncateReply.FromString,
                )
        self.Chown = channel.unary_unary(
                '/filesystem.FileSystem/Chown',
                request_serializer=filesystem__pb2.ChownRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ChownReply.FromString,
                )
        self.Create = channel.unary_unary(
                '/filesystem.FileSystem/Create',
                request_serializer=filesystem__pb2.CreateRequest.SerializeToString,
                response_deserializer=filesystem__pb2.CreateReply.FromString,
                )
        self.Flush = channel.unary_unary(
                '/filesystem.FileSystem/Flush',
                request_serializer=filesystem__pb2.FlushRequest.SerializeToString,
                response_deserializer=filesystem__pb2.FlushReply.FromString,
                )
        self.Close = channel.unary_unary(
                '/filesystem.FileSystem/Close',
                request_serializer=filesystem__pb2.CloseRequest.SerializeToString,
                response_deserializer=filesystem__pb2.CloseReply.FromString,
                )
        self.Mknod = channel.unary_unary(
                '/filesystem.FileSystem/Mknod',
                request_serializer=filesystem__pb2.MknodRequest.SerializeToString,
                response_deserializer=filesystem__pb2.MknodReply.FromString,
                )
        self.Chmod = channel.unary_unary(
                '/filesystem.FileSystem/Chmod',
                request_serializer=filesystem__pb2.ChmodRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ChmodReply.FromString,
                )
        self.Unlink = channel.unary_unary(
                '/filesystem.FileSystem/Unlink',
                request_serializer=filesystem__pb2.UnlinkRequest.SerializeToString,
                response_deserializer=filesystem__pb2.UnlinkReply.FromString,
                )
        self.Rename = channel.unary_unary(
                '/filesystem.FileSystem/Rename',
                request_serializer=filesystem__pb2.RenameRequest.SerializeToString,
                response_deserializer=filesystem__pb2.RenameReply.FromString,
                )
        self.Link = channel.unary_unary(
                '/filesystem.FileSystem/Link',
                request_serializer=filesystem__pb2.LinkRequest.SerializeToString,
                response_deserializer=filesystem__pb2.LinkReply.FromString,
                )
        self.Utime = channel.unary_unary(
                '/filesystem.FileSystem/Utime',
                request_serializer=filesystem__pb2.UtimeRequest.SerializeToString,
                response_deserializer=filesystem__pb2.UtimeReply.FromString,
                )
        self.Readlink = channel.unary_unary(
                '/filesystem.FileSystem/Readlink',
                request_serializer=filesystem__pb2.ReadlinkRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ReadlinkReply.FromString,
                )


class FileSystemServicer(object):
    """The string reversal service definition.
    """

    def sendStringRequest(self, request, context):
        """Function invoked to send the request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Access(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mkdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rmdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Readdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Truncate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Flush(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mknod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chmod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rename(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Link(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Utime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Readlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileSystemServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendStringRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.sendStringRequest,
                    request_deserializer=filesystem__pb2.StringRequest.FromString,
                    response_serializer=filesystem__pb2.StringReply.SerializeToString,
            ),
            'Access': grpc.unary_unary_rpc_method_handler(
                    servicer.Access,
                    request_deserializer=filesystem__pb2.AccessRequest.FromString,
                    response_serializer=filesystem__pb2.AccessReply.SerializeToString,
            ),
            'Mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Mkdir,
                    request_deserializer=filesystem__pb2.MkdirRequest.FromString,
                    response_serializer=filesystem__pb2.MkdirReply.SerializeToString,
            ),
            'Rmdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Rmdir,
                    request_deserializer=filesystem__pb2.RmdirRequest.FromString,
                    response_serializer=filesystem__pb2.RmdirReply.SerializeToString,
            ),
            'Readdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Readdir,
                    request_deserializer=filesystem__pb2.ReaddirRequest.FromString,
                    response_serializer=filesystem__pb2.ReaddirReply.SerializeToString,
            ),
            'GetAttr': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttr,
                    request_deserializer=filesystem__pb2.GetAttrRequest.FromString,
                    response_serializer=filesystem__pb2.GetAttrReply.SerializeToString,
            ),
            'Open': grpc.unary_unary_rpc_method_handler(
                    servicer.Open,
                    request_deserializer=filesystem__pb2.OpenRequest.FromString,
                    response_serializer=filesystem__pb2.OpenReply.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=filesystem__pb2.ReadRequest.FromString,
                    response_serializer=filesystem__pb2.ReadReply.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=filesystem__pb2.WriteRequest.FromString,
                    response_serializer=filesystem__pb2.WriteReply.SerializeToString,
            ),
            'Truncate': grpc.unary_unary_rpc_method_handler(
                    servicer.Truncate,
                    request_deserializer=filesystem__pb2.TruncateRequest.FromString,
                    response_serializer=filesystem__pb2.TruncateReply.SerializeToString,
            ),
            'Chown': grpc.unary_unary_rpc_method_handler(
                    servicer.Chown,
                    request_deserializer=filesystem__pb2.ChownRequest.FromString,
                    response_serializer=filesystem__pb2.ChownReply.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=filesystem__pb2.CreateRequest.FromString,
                    response_serializer=filesystem__pb2.CreateReply.SerializeToString,
            ),
            'Flush': grpc.unary_unary_rpc_method_handler(
                    servicer.Flush,
                    request_deserializer=filesystem__pb2.FlushRequest.FromString,
                    response_serializer=filesystem__pb2.FlushReply.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=filesystem__pb2.CloseRequest.FromString,
                    response_serializer=filesystem__pb2.CloseReply.SerializeToString,
            ),
            'Mknod': grpc.unary_unary_rpc_method_handler(
                    servicer.Mknod,
                    request_deserializer=filesystem__pb2.MknodRequest.FromString,
                    response_serializer=filesystem__pb2.MknodReply.SerializeToString,
            ),
            'Chmod': grpc.unary_unary_rpc_method_handler(
                    servicer.Chmod,
                    request_deserializer=filesystem__pb2.ChmodRequest.FromString,
                    response_serializer=filesystem__pb2.ChmodReply.SerializeToString,
            ),
            'Unlink': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlink,
                    request_deserializer=filesystem__pb2.UnlinkRequest.FromString,
                    response_serializer=filesystem__pb2.UnlinkReply.SerializeToString,
            ),
            'Rename': grpc.unary_unary_rpc_method_handler(
                    servicer.Rename,
                    request_deserializer=filesystem__pb2.RenameRequest.FromString,
                    response_serializer=filesystem__pb2.RenameReply.SerializeToString,
            ),
            'Link': grpc.unary_unary_rpc_method_handler(
                    servicer.Link,
                    request_deserializer=filesystem__pb2.LinkRequest.FromString,
                    response_serializer=filesystem__pb2.LinkReply.SerializeToString,
            ),
            'Utime': grpc.unary_unary_rpc_method_handler(
                    servicer.Utime,
                    request_deserializer=filesystem__pb2.UtimeRequest.FromString,
                    response_serializer=filesystem__pb2.UtimeReply.SerializeToString,
            ),
            'Readlink': grpc.unary_unary_rpc_method_handler(
                    servicer.Readlink,
                    request_deserializer=filesystem__pb2.ReadlinkRequest.FromString,
                    response_serializer=filesystem__pb2.ReadlinkReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'filesystem.FileSystem', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileSystem(object):
    """The string reversal service definition.
    """

    @staticmethod
    def sendStringRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/sendStringRequest',
            filesystem__pb2.StringRequest.SerializeToString,
            filesystem__pb2.StringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Access(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Access',
            filesystem__pb2.AccessRequest.SerializeToString,
            filesystem__pb2.AccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Mkdir',
            filesystem__pb2.MkdirRequest.SerializeToString,
            filesystem__pb2.MkdirReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rmdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Rmdir',
            filesystem__pb2.RmdirRequest.SerializeToString,
            filesystem__pb2.RmdirReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Readdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Readdir',
            filesystem__pb2.ReaddirRequest.SerializeToString,
            filesystem__pb2.ReaddirReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/GetAttr',
            filesystem__pb2.GetAttrRequest.SerializeToString,
            filesystem__pb2.GetAttrReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Open',
            filesystem__pb2.OpenRequest.SerializeToString,
            filesystem__pb2.OpenReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Read',
            filesystem__pb2.ReadRequest.SerializeToString,
            filesystem__pb2.ReadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Write',
            filesystem__pb2.WriteRequest.SerializeToString,
            filesystem__pb2.WriteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Truncate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Truncate',
            filesystem__pb2.TruncateRequest.SerializeToString,
            filesystem__pb2.TruncateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Chown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Chown',
            filesystem__pb2.ChownRequest.SerializeToString,
            filesystem__pb2.ChownReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Create',
            filesystem__pb2.CreateRequest.SerializeToString,
            filesystem__pb2.CreateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Flush(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Flush',
            filesystem__pb2.FlushRequest.SerializeToString,
            filesystem__pb2.FlushReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Close',
            filesystem__pb2.CloseRequest.SerializeToString,
            filesystem__pb2.CloseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Mknod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Mknod',
            filesystem__pb2.MknodRequest.SerializeToString,
            filesystem__pb2.MknodReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Chmod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Chmod',
            filesystem__pb2.ChmodRequest.SerializeToString,
            filesystem__pb2.ChmodReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Unlink',
            filesystem__pb2.UnlinkRequest.SerializeToString,
            filesystem__pb2.UnlinkReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Rename',
            filesystem__pb2.RenameRequest.SerializeToString,
            filesystem__pb2.RenameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Link(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Link',
            filesystem__pb2.LinkRequest.SerializeToString,
            filesystem__pb2.LinkReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Utime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Utime',
            filesystem__pb2.UtimeRequest.SerializeToString,
            filesystem__pb2.UtimeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Readlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/filesystem.FileSystem/Readlink',
            filesystem__pb2.ReadlinkRequest.SerializeToString,
            filesystem__pb2.ReadlinkReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
